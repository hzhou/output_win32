include: std_c.def
include: ext.def
include: win32/std.def
include: win32/windows.def
include: win32/gdi.def

subcode: win32_autoload
subcode: basic_frame
    $call @global
    $list WinMain

fncode: WinMain
    $call main2

#---------------------------------------- 
subcode: win_main(mainname)
    $global hwnd_main
    &call register_wndclass, "$(mainname)", WndProc_main
        NOOP
    &call create_window, hwnd_main, "$(mainname)"
        NOOP
    $call win_show, hwnd_main

#---------------------------------------- 
subcode: win_show(hwnd)
    NEWLINE
    ShowWindow($(hwnd), n_cmdshow)
    UpdateWindow($(hwnd))

subcode: win_loop
    NEWLINE
    $local MSG msg
    $while GetMessage(&msg, NULL, 0, 0)>0
        TranslateMessage(&msg)
        DispatchMessage(&msg)

###############################################################
subcode:: autoload_symbols
    $symbol s_printf_buffer[100], n_printf_length=0
    
subcode: sprint(@fmt)
    $auto_global s_printf_buffer[100], n_printf_length=0
    $eval parse_fmt, $(fmt)
    n_printf_length=_snprintf(s_printf_buffer, 100, $(fmt))
    $if n_printf_length<0
        s_printf_buffer[99]='\0'
        n_printf_length=99
    $(mexport:s=s_printf_buffer,n=n_printf_length)

# ----------------------------------------------------------------
subcode: init_println
    $local n_cur_text_x, n_cur_text_y, n_text_height
    n_cur_text_x=10
    n_cur_text_y=10
    n_text_height=20
    $call newfont

subcode: move_to(x, y)
    n_cur_text_x=$(x)
    n_cur_text_y=$(y)

subcode: println(@msg)
    $uselib gdi32
    _snprintf(ts_msg_buffer, 200, $(msg))
    TextOut(hdc, n_cur_text_x, n_cur_text_y, ts_msg_buffer, strlen(ts_msg_buffer))
    n_cur_text_y+=n_text_height

###############################################################
subcode: msgbox(@msg)
    $include stdio
    $local ts_msg_buffer[1000]
    sprintf(ts_msg_buffer, $(msg))
    MessageBox(hwnd_main, ts_msg_buffer, "Message Box", MB_OK)

subcode: init_console
    AllocConsole()
    freopen("conout$","w",stdout)
    freopen("conout$","w",stderr)
    printf("Console ready ...\n")     

subcode: init_debug
    $global s_debug_buffer[1024]
    $print usesub: debug_print

subcode: debug_print(@fmt)
    $include stdio
    snprintf(s_debug_buffer, 1024, $(fmt))
    OutputDebugString(s_debug_buffer)

###############################################################
subcode: openfilename
    $uselib comdlg32
    $register_name(ofn) OPENFILENAME
    $local ofn, ts_file[260], b_result
    ZeroMemory(&ofn, sizeof(ofn))
    ofn.lStructSize=sizeof(ofn)
    ofn.hwndOwner=hwnd_main
    ofn.lpstrFile=ts_file
    ofn.lpstrFile[0]='\0'
    ofn.nMaxFile=sizeof(ts_file)
    ofn.lpstrFilter="All\0*.*\0\0"
    ofn.nFilterIndex=1
    ofn.lpstrFileTitle=NULL
    ofn.nMaxFileTitle=0
    ofn.lpstrInitialDir=NULL
    ofn.Flags=OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
    b_result=GetOpenFileName(&ofn)

# ---------------------------------------------------------------
subcode: dialog(name)
    $(block:global_init)
        $eval wndproc, DlgProc_$(name)
    DialogBox(cur_instance, MAKEINTRESOURCE(dialog_$(name)), hwnd, DlgProc_$(name))

subcode: create_dialog(name, var)
    $(block:global_init)
        $eval wndproc, DlgProc_$(name)
    $(var)=CreateDialog(cur_instance, MAKEINTRESOURCE(dialog_$(name)), hwnd, DlgProc_$(name))

# ---------------------------------------------------------------
subcode: SetClassLong(val)
    $(if:val:4=IDC_)
        SetClassLongPtr(hwnd, GCL_HCURSOR, (LONG_PTR)LoadCursor(NULL, MAKEINTRESOURCE($(val))))

# ---------------------------------------------------------------
